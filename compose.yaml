services:
  minishop.database:
    image: postgres:latest
    container_name: minishop.database
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./.containers/inventory-db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  maildev:
    image: maildev/maildev
    container_name: maildev
    ports:
      - "1025:1025"
      - "1080:1080"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
        
  apigateway:
    image: apigateway
    container_name: apigateway
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5001:8080"

  catalog:
    image: catalog
    container_name: catalog.api
    build:
      context: .
      dockerfile: Catalog/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5002:8080"
    depends_on:
      minishop.database:
        condition: service_healthy

  inventory:
    image: inventory
    container_name: inventory.api
    build:
      context: .
      dockerfile: Inventory/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5003:8080"
    depends_on:
      minishop.database:
        condition: service_healthy

  order:
    image: order
    container_name: order.api
    build:
      context: .
      dockerfile: Order/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5004:8080"
    depends_on:
      minishop.database:
        condition: service_healthy

  notification:
    image: notification
    container_name: notification.api
    build:
      context: .
      dockerfile: Notification/Dockerfile
    depends_on:
      minishop.database:
        condition: service_healthy

  web:
    image: minishop.web
    container_name: minishop.web
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - apigateway
      - catalog
      - inventory
      - order
      - notification
